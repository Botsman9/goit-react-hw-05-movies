{"version":3,"file":"static/js/MoviesView.ebc29563.chunk.js","mappings":"yMACA,EAAuB,wBAAvB,EAAsD,wBAAtD,EAAsF,yBAAtF,EAA0H,4BAA1H,EAA8J,yB,SC+B9J,EA5BkB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MACjB,OACE,eAAIC,UAAWC,EAAf,SACGJ,EAAOK,KAAI,SAAAC,GAAK,OACf,eAAmBH,UAAWC,EAA9B,UACE,UAAC,KAAD,CACEG,GAAI,CACFC,SAAS,WAAD,OAAaF,EAAMG,IAC3BC,MAAO,CAAEC,KAAMV,IAEjBE,UAAWC,EALb,WAOE,gBACED,UAAWC,EACXQ,IAAKC,EAAAA,GAAYP,EAAMQ,YACvBC,IAAKT,EAAMU,OAASV,EAAMW,KAC1BC,MAAM,MACNC,OAAO,SAET,cAAGhB,UAAWC,EAAd,SAA2BE,EAAMU,OAASV,EAAMW,WAf3CX,EAAMG,W,8GCRvB,EAA6B,8BAA7B,EAAgF,sCAAhF,EAA+M,qC,SC6C/M,EAxCkB,SAAC,GAAiB,IAAfW,EAAc,EAAdA,QACnB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAgBA,OACE,mBAAQpB,UAAU,YAAlB,UACE,kBAAMqB,SAZU,SAAAC,GAClBA,EAAIC,iBAEgB,KAAhBJ,EAIJF,EAAQE,GAHNK,EAAAA,GAAAA,MAAY,yBAQiBxB,UAAWC,EAAxC,WACE,mBAAQwB,KAAK,SAASzB,UAAWC,EAAjC,UACE,SAAC,MAAD,OAEF,kBACED,UAAWC,EACXwB,KAAK,OACLC,aAAa,MACbC,YAAY,YACZC,MAAOT,EACPU,SA1BY,SAAAP,GAClBF,EAAeE,EAAIQ,OAAOF,gB,oBC0B9B,EA9BgB,WACd,OAA4BV,EAAAA,EAAAA,UAAS,MAArC,eAAOrB,EAAP,KAAekC,EAAf,KACA,GAA0Bb,EAAAA,EAAAA,UAAS,IAAnC,eAAOc,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACHF,IAILG,EAAAA,EAAAA,IAAiBH,GAAOI,MAAK,SAAAC,GACtBA,EAAQC,QAAQC,OAIrBR,EAAUM,EAAQC,SAHhBd,EAAAA,GAAAA,MAAY,kBAKf,CAACQ,IAMJ,OACE,iCACE,SAAC,EAAD,CAAWf,QANC,SAAAoB,GACdJ,EAASI,MAMNxC,IAAU,SAAC2C,EAAA,EAAD,CAAW3C,OAAQA,S,+MC/B9B4C,EAAM,mCACNC,EAAW,+BACJhC,EAAY,kCAAlB,SAEQiC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OAAID,EAAJ,qCAAyCD,IAGjE,SAASa,EAAehD,GAC7B,OAAOqC,EAAuB,GAAD,OACxBD,EADwB,kBACNpC,EADM,oBACQmC,EADR,oBAKxB,SAASN,EAAiBrB,GAC/B,OAAO6B,EAAuB,GAAD,OACxBD,EADwB,iCACSD,EADT,kBACsB3B,EADtB,+CAKxB,SAASyC,EAAejD,GAC7B,OAAOqC,EAAuB,GAAD,OACxBD,EADwB,kBACNpC,EADM,4BACgBmC,EADhB,oBAKxB,SAASe,EAAkBlD,GAChC,OAAOqC,EAAuB,GAAD,OACxBD,EADwB,kBACNpC,EADM,4BACgBmC,EADhB","sources":["webpack://goit-react-hw-05-movies/./src/components/Page/MovieCard/MovieCard.module.css?7cae","components/Page/MovieCard/MovieCard.jsx","webpack://goit-react-hw-05-movies/./src/components/Page/Searchbar/Searchbar.module.css?3e38","components/Page/Searchbar/Searchbar.jsx","components/Reviews/Reviews.jsx","components/Services/movies-api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieCard_list__9N8-Q\",\"item\":\"MovieCard_item__2GWwb\",\"title\":\"MovieCard_title__z7N-7\",\"subtitle\":\"MovieCard_subtitle__69DZo\",\"image\":\"MovieCard_image__vS6Se\"};","import { Link, useLocation } from 'react-router-dom';\nimport { IMAGE_URL } from '../../Services/movies-api';\nimport s from './MovieCard.module.css';\n\nconst MovieCard = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul className={s.list}>\n      {movies.map(movie => (\n        <li key={movie.id} className={s.item}>\n          <Link\n            to={{\n              pathname: `/movies/${movie.id}`,\n              state: { from: location },\n            }}\n            className={s.title}\n          >\n            <img\n              className={s.image}\n              src={IMAGE_URL + movie.poster_path}\n              alt={movie.title || movie.name}\n              width=\"300\"\n              height=\"450\"\n            />\n            <p className={s.subtitle}>{movie.title || movie.name}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"Searchbar_SearchForm__4Veyr\",\"SearchForm__button\":\"Searchbar_SearchForm__button__zlcMN\",\"SearchForm__buttonLabel\":\"Searchbar_SearchForm__buttonLabel__k4lFz\",\"SearchForm__input\":\"Searchbar_SearchForm__input__sK3Iu\"};","import { useState } from 'react';\nimport { ImSearch } from 'react-icons/im';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport s from './Searchbar.module.css';\n\nconst SearchBar = ({ onClick }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleInput = evt => {\n    setSearchQuery(evt.target.value);\n  };\n\n  const handleClick = evt => {\n    evt.preventDefault();\n\n    if (searchQuery === '') {\n      toast.error('Ooops...No results:(');\n      return;\n    }\n    onClick(searchQuery);\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <form onSubmit={handleClick} className={s.SearchForm}>\n        <button type=\"submit\" className={s.SearchForm__button}>\n          <ImSearch />\n        </button>\n        <input\n          className={s.SearchForm__input}\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={handleInput}\n        ></input>\n      </form>\n    </header>\n  );\n};\n\nSearchBar.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport SearchBar from '../Page/Searchbar/Searchbar';\nimport MovieCard from '../Page/MovieCard/MovieCard';\nimport { fetchMovieSearch } from '../Services/movies-api';\n\nconst Reviews = () => {\n  const [movies, setMovies] = useState(null);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    fetchMovieSearch(query).then(request => {\n      if (!request.results.length) {\n        toast.error('Try again');\n        return;\n      }\n      setMovies(request.results);\n    });\n  }, [query]);\n\n  const onClick = request => {\n    setQuery(request);\n  };\n\n  return (\n    <>\n      <SearchBar onClick={onClick} />\n      {movies && <MovieCard movies={movies} />}\n    </>\n  );\n};\n\nexport default Reviews;\n","const KEY = '7e78d9d0b80a5a9938ce5aba09bf2c47';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendMovies() {\n  return fetchWithErrorHandling(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n}\n\nexport function fetchMovieById(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}?api_key=${KEY}&language=en-US`,\n  );\n}\n\nexport function fetchMovieSearch(name) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${name}&language=en-US&page=1&include_adult=false`,\n  );\n}\n\nexport function fetchMovieCast(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/credits?api_key=${KEY}&language=en-US`,\n  );\n}\n\nexport function fetchMovieReviews(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US`,\n  );\n}\n"],"names":["movies","location","useLocation","className","s","map","movie","to","pathname","id","state","from","src","IMAGE_URL","poster_path","alt","title","name","width","height","onClick","useState","searchQuery","setSearchQuery","onSubmit","evt","preventDefault","toast","type","autoComplete","placeholder","value","onChange","target","setMovies","query","setQuery","useEffect","fetchMovieSearch","then","request","results","length","MovieCard","KEY","BASE_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendMovies","fetchMovieById","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}